#! /usr/bin/env node

const childProcess = require('child_process');
const { EOL } = require('os');

function $(command) {
  return childProcess.execSync(command, { encoding: 'utf-8' }).toString().trim();
}

function exit(message) {
  console.error(`merge-pr: ${message}`);
  process.exit(1);
}

function ensureSynchronized() {
  const current = $('hub rev-parse --abbrev-ref HEAD');
  const upstream = $('hub rev-parse --abbrev-ref --symbolic-full-name @{u}');
  const range = $(`hub rev-parse -q ${current} ${upstream}`);
  const [start, end] = range.split(/\s+/m);
  if (start !== end) {
    exit('local branch is not in sync with upstream');
  }
}

const [/*node*/, /*file*/, prId, remote = "origin"] = process.argv;

if (prId === undefined) {
  exit(`you must specify a pull request number`);
}

const separator = '|';
const rawResults = $(`hub pr list -f "%I${separator}%B${separator}%H${separator}%U${separator}%sH"`);

const results = rawResults.split(EOL).map(line => {
  const [id, baseBranch, headBranch, url, sha] = line.split(separator);
  return { id, baseBranch, headBranch, url, sha };
});

const details = results.find(detail => detail.id === prId);

if (details === undefined) {
  exit(`${prId} - not an open pull request number`)
}

try {
  console.log($(`hub ci-status -v ${details.sha}`));
} catch(error) {
  exit(`CI status not successful:${EOL}${error.stderr.toString().trim()}`);
}

// switch to pull request target branch
console.log($(`hub checkout ${details.baseBranch}`));
// bring in any changes from upstream
console.log($(`hub sync`));
// ensure local and remote head branch are in sync (`hub sync` only warns)
ensureSynchronized();
// Merge similar to GitHub Merge Button
console.log($(`hub merge ${details.url}`));
// Push merge to target branch
console.log($(`hub push`));
// Delete remote head branch
console.log($(`hub push ${remote} :${details.headBranch}`));
// Bring in any more changes and remote local head branch
console.log($(`hub sync`));
