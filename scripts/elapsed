#! /usr/bin/env bash

# Prefer simple name for error messages
me=$(basename -a "$0")

# if not on $PATH, include path in usage message
if [ -n "$(type -P "$me")" ]; then
  usage_me=$me
else
  usage_me=$0
fi

function usage() {
  echo "usage: $usage_me -d <description> -l <logfile> -c <command>"
}

function check_already_specified() {
  if [ -n "${!1}" ]; then
    if [ -n "$command" ]; then
      echo "$me: option already specified (did you quote the -c argument correctly?): -$opt"
    else
      echo "$me: option already specified: -$opt"
    fi
    usage
    exit 4
  fi
}

function check_required() {
  if [ -z "${!2}" ]; then
    echo "$me: required option not specified: -$1"
    usage
    exit 5
  fi
}

while getopts ":d:l:c:h" opt; do
  last_opt=$opt
  case $opt in
  d)
    check_already_specified 'description'
    description=$OPTARG
    ;;
  l)
    check_already_specified 'logfile'
    logfile=$OPTARG
    ;;
  c)
    check_already_specified 'command'
    command=$OPTARG
    ;;
  h)
    usage
    exit 0
    ;;
  :)
    echo "$me: option requires an argument: -$OPTARG"
    usage
    exit 3
    ;;
  \? | *)
    if [ -n "$command" ]; then
      echo "$me: invalid option (did you quote the -c argument correctly?): -$OPTARG"
    else
      echo "$me: invalid option: -$OPTARG"
    fi
    usage
    exit 2
    ;;
  esac
done

# if all arguments parsed, $OPTIND is one more than $#
if [ $OPTIND -lt $# ] || [ $OPTIND -eq $# ]; then
  if [ -n "$last_opt" ]; then
    echo "$me: unexpected trailing arguments (did you quote the -$last_opt argument correctly?): ${*:$OPTIND}"
  else
    echo "$me: unexpected trailing arguments (are you missing options?): ${*:$OPTIND}"
  fi
  usage
  exit 7
fi

check_required 'd' 'description'
check_required 'l' 'logfile'
check_required 'c' 'command'

received_signal=
function trap_signals() {
  signals=(HUP INT QUIT KILL TERM)

  for signal in "${signals[@]}"; do
    trap "received_signal='true'" "$signal"
  done
}

echo "-----elapsed-----" | tee -a "$logfile"
current_time=$(date "+%Y-%m-%d %H:%M:%S")
echo "Started '$description' at $current_time" | tee -a "$logfile"
echo "Executing command: $command" | tee -a "$logfile"
echo "-----elapsed-----" | tee -a "$logfile"

trap_signals
bash -c "$command" 2>&1 | tee -a "$logfile"

exit_code=${PIPESTATUS[0]}

echo "-----elapsed-----" | tee -a "$logfile"
current_time=$(date "+%Y-%m-%d %H:%M:%S")
elapsed_time=$(printf '%02dh:%02dm:%02ds\n' $((SECONDS/3600)) $((SECONDS%3600/60)) $((SECONDS%60)))

if [ -n "$received_signal" ]; then
  signal=$(kill -l "$exit_code")
  echo "Received SIG$signal"
fi

echo "Finished '$description' at $current_time with exit code $exit_code in $elapsed_time" | tee -a "$logfile"
echo "-----elapsed-----" | tee -a "$logfile"

if [ "$exit_code" -ne "0" ]; then
  exit 127
fi
