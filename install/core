#!/usr/bin/env bash

set -e

CONFIG="install/conf.yaml"
DOTBOT_DIR="dotbot"
DOTBOT_BIN="bin/dotbot"
BASEDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/.."
DOTBOT_PATH="${BASEDIR}/${DOTBOT_DIR}/${DOTBOT_BIN}"

cd "${BASEDIR}"

function __color_log() {
  local message=$2
  if [[ -t 1 ]] && tput colors &> /dev/null; then
    local message="\033[${1}m${2}\033[0m"
  fi
  echo -e "$message"
}

echo "${BASH_SOURCE[*]}"
echo "${BASEDIR}"
ls -la "${BASEDIR}"
# shellcheck disable=SC1090
source "${BASEDIR}/bashrc"

while ! xcode-select --print-path &> /dev/null; do
  xcode-select --install &> /dev/null
  __color_log 94 'Waiting for Xcode Command Line Developer Tools installation'
  __color_log 94 '(Select "Install" in the "Install Command Line Developer Tools" prompt)'
  sleep 15
done

__color_log 92 "Xcode or Xcode Command Line Developer Tools are installed at $(xcode-select --print-path)"

git submodule update --init --recursive

if [ -n "$CI" ]; then
  git -C "$DOTBOT_DIR" apply "$BASEDIR/install/ci-messenger.patch"
  $DOTBOT_PATH -d "${BASEDIR}" -c "${CONFIG}"
  git -C "$DOTBOT_DIR" apply -R "$BASEDIR/install/ci-messenger.patch"
else
  $DOTBOT_PATH -d "${BASEDIR}" -c "${CONFIG}"
fi

if [[ "$SHELL" != "$(command -v bash)" ]] || [[ "$BASH_VERSION" != "$(bash -c 'echo $BASH_VERSION')" ]]; then
  if [ -n "$SKIP_SHELL_EXIT" ]; then
    __color_log 95 "A new version of bash was installed via Homebrew. Be sure to exit this (and any other) shell process to use it."
  else
    __color_log 95 "A new version of bash was installed via Homebrew. Exiting old shell processes..."
    pkill -SIGUSR1 -a bash
  fi
fi
