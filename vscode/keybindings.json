// Place your key bindings in this file to override the defaults
[
  // Don't use tab to accept suggestions
  {
    "key": "tab",
    "command": "-acceptSelectedSuggestion"
  },

  // Turn off Explain Mode
  {
    "key": "cmd+/",
    "command": "-toggleExplainMode",
    "when": "suggestWidgetVisible"
  },

  // Use ctrl+space to toggle IntelliSense
  {
    "key": "ctrl+space",
    "command": "-toggleSuggestionDetails",
    "when": "suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "escape",
    "command": "-hideSuggestWidget",
    "when": "suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+space",
    "command": "hideSuggestWidget",
    "when": "editorTextFocus && suggestWidgetVisible"
  },

  // Use tab and shift/alt+tab to cycle through IntelliSense
  {
    "key": "tab",
    "command": "selectNextSuggestion",
    "when": "editorTextFocus && suggestWidgetVisible"
  },
  {
    "key": "shift+tab",
    "command": "selectPrevSuggestion",
    "when": "editorTextFocus && suggestWidgetVisible"
  },
  {
    "key": "alt+tab",
    "command": "selectPrevSuggestion",
    "when": "editorTextFocus && suggestWidgetVisible"
  },

  // use ctrl+p to toggle Parameter Hints
  {
    "key": "escape",
    "command": "-closeParameterHints",
    "when": "editorFocus && parameterHintsVisible"
  },
  {
    "key": "ctrl+p",
    "command": "closeParameterHints",
    "when": "editorTextFocus && parameterHintsVisible"
  },

  // Use tab and shift/alt+tab to cycle through Parameter Hints
  {
    "key": "tab",
    "command": "showNextParameterHint",
    "when": "editorTextFocus && parameterHintsVisible"
  },
  {
    "key": "shift+tab",
    "command": "showPrevParameterHint",
    "when": "editorTextFocus && parameterHintsVisible"
  },
  {
    "key": "alt+tab",
    "command": "showPrevParameterHint",
    "when": "editorTextFocus && parameterHintsVisible"
  },

  // use alt+tab to display open files
  {
    "key": "alt+tab",
    "command": "workbench.action.showAllEditors"
  },

  // INSERT mode for Files Explorer
  {
    "key": "a",
    "command": "explorer.newFile",
    "when": "filesExplorerFocus && !inputFocus"
  },
  {
    "key": "Shift+a",
    "command": "explorer.newFolder",
    "when": "filesExplorerFocus && !inputFocus"
  },
  {
    "key": "y y",
    "command": "filesExplorer.copy",
    "when": "filesExplorerFocus && !inputFocus"
  },
  {
    "key": "p",
    "command": "filesExplorer.paste",
    "when": "filesExplorerFocus && !inputFocus"
  },
  {
    "key": "d d",
    "command": "deleteFile",
    "when": "filesExplorerFocus && !inputFocus"
  },

  // notifications
  {
    "key": "alt+cmd+n",
    "command": "notifications.showList"
  },
  {
    "key": "tab",
    "command": "notifications.focusNextToast",
    "when": "notificationFocus && notificationToastsVisible"
  },
  {
    "key": "shift+tab",
    "command": "notifications.focusPreviousToast",
    "when": "notificationFocus && notificationToastsVisible"
  },
  {
    "key": "alt+tab",
    "command": "notifications.focusPreviousToast",
    "when": "notificationFocus && notificationToastsVisible"
  },

  // prevent interference with vim mode escape
  {
    "key": "escape",
    "command": "-cancelRenameInput",
    "when": "editorFocus && renameInputVisible"
  },
  {
    "key": "escape",
    "command": "-cancelSelection",
    "when": "editorHasSelection && textInputFocus"
  },
  {
    "key": "escape",
    "command": "-closeAccessibilityHelp",
    "when": "accessibilityHelpWidgetVisible && editorFocus"
  },
  {
    "key": "escape",
    "command": "-closeBreakpointWidget",
    "when": "breakpointWidgetVisible && textInputFocus"
  },
  {
    "key": "escape",
    "command": "-closeDirtyDiff",
    "when": "dirtyDiffVisible"
  },
  {
    "key": "escape",
    "command": "-closeMarkersNavigation",
    "when": "editorFocus && markersNavigationVisible"
  },
  {
    "key": "escape",
    "command": "-closeReferenceSearch",
    "when": "referenceSearchVisible && !config.editor.stablePeek"
  },
  {
    "key": "escape",
    "command": "-closeReferenceSearchEditor",
    "when": "inReferenceSearchEditor && !config.editor.stablePeek"
  },
  {
    "key": "escape",
    "command": "-closeReplaceInFilesWidget",
    "when": "replaceInputBoxFocus && searchViewletVisible"
  },
  {
    "key": "escape",
    "command": "-editor.action.webvieweditor.hideFind",
    "when": "webviewFindWidgetVisible && !editorFocus && activeEditor == 'WebviewEditor'"
  },
  {
    "key": "escape",
    "command": "-editor.cancelOperation",
    "when": "cancellableOperation"
  },
  {
    "key": "escape",
    "command": "-editor.closeCallHierarchy",
    "when": "callHierarchyVisible && !config.editor.stablePeek"
  },
  {
    "key": "escape",
    "command": "-editor.gotoNextSymbolFromResult.cancel",
    "when": "hasSymbols"
  },
  {
    "key": "escape",
    "command": "-leaveEditorMessage",
    "when": "messageVisible"
  },
  {
    "key": "escape",
    "command": "-leaveSnippet",
    "when": "editorTextFocus && inSnippetMode"
  },
  {
    "key": "escape",
    "command": "-notifications.hideToasts",
    "when": "notificationToastsVisible"
  },
  {
    "key": "escape",
    "command": "-removeSecondaryCursors",
    "when": "editorHasMultipleSelections && textInputFocus"
  },
  {
    "key": "escape",
    "command": "-workbench.action.closeQuickOpen",
    "when": "inQuickOpen"
  },
  {
    "key": "escape",
    "command": "-workbench.action.hideComment",
    "when": "commentEditorFocused"
  },
]
